This is a self assessment. You do not need to turn in your answers. Instead, use this as an opportunity to determine the best course of action for your own learning. Write your code and run it to make sure it works! Don't forget to think of edge cases and verify that your code still works. If you are able to confidently demonstrate to yourself that you can solve these problems, congratulations! 
If you are uncertain about whether your code works, continue reviewing these problems for the next two weeks as you participate in first stack algorithms. Take this self assessment again after two weeks, and if you continue to be uncertain about your code, consider repeating the fundamental aglorithms sessions with the next cohort.

1.  FizzBuzz - Write a function that prints all the numbers from 1 to n, where n is a parameter of the function. Assume that n is a positive number. For multiples of 3, instead of the number, print "Fizz". For multiples of 5, instead of the number, print "Buzz". For numbers which are multiples of both 3 and 5, instead of the number, print "FizzBuzz". To test your algorithm, run fizzbuzz(100) and be sure it prints the expected output.

    Example:
    
    Input: fizzbuzz(20)
    Output: 1  2  Fizz  4  Buzz  Fizz  7  8  Fizz  Buzz  11  Fizz  13  14  FizzBuzz  16  17  Fizz  19  Buzz

2.  InsertAt -  Given an array (arr), an index (idx), and a value (n), insert the value into the array at the given index. Leave all the other values in the array in their original order. Do this without using built-in-array methods, such as .push. You may use .length. Work in place, meaning you must alter the existing array without making a copy of it or creating any new arrays.

    Example:

    Input: insertAt([1,2,3], 2, 7)
    Output: [1,2,7,3]

    Example:

    Input: insertAt([1,2,3], 5, 20)
    Output: [1,2,3, undefined, undefined, 20]

    Example:  insertAt([1,2,3], -3, 20)
    Output: [1,2,3]




